// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ad.uda.pfc.domain;

import ad.uda.pfc.domain.Caracteristica;
import ad.uda.pfc.domain.CaracteristicaDataOnDemand;
import ad.uda.pfc.domain.MagnitudDataOnDemand;
import ad.uda.pfc.domain.SensorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CaracteristicaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CaracteristicaDataOnDemand: @Component;
    
    private Random CaracteristicaDataOnDemand.rnd = new SecureRandom();
    
    private List<Caracteristica> CaracteristicaDataOnDemand.data;
    
    @Autowired
    private MagnitudDataOnDemand CaracteristicaDataOnDemand.magnitudDataOnDemand;
    
    @Autowired
    private SensorDataOnDemand CaracteristicaDataOnDemand.sensorDataOnDemand;
    
    public Caracteristica CaracteristicaDataOnDemand.getNewTransientCaracteristica(int index) {
        Caracteristica obj = new Caracteristica();
        setDescripcio(obj, index);
        setValor(obj, index);
        return obj;
    }
    
    public void CaracteristicaDataOnDemand.setDescripcio(Caracteristica obj, int index) {
        String descripcio = "descripcio_" + index;
        if (descripcio.length() > 250) {
            descripcio = descripcio.substring(0, 250);
        }
        obj.setDescripcio(descripcio);
    }
    
    public void CaracteristicaDataOnDemand.setValor(Caracteristica obj, int index) {
        Double valor = new Integer(index).doubleValue();
        if (valor > 10.0D) {
            valor = 10.0D;
        }
        obj.setValor(valor);
    }
    
    public Caracteristica CaracteristicaDataOnDemand.getSpecificCaracteristica(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Caracteristica obj = data.get(index);
        Integer id = obj.getId();
        return Caracteristica.findCaracteristica(id);
    }
    
    public Caracteristica CaracteristicaDataOnDemand.getRandomCaracteristica() {
        init();
        Caracteristica obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Caracteristica.findCaracteristica(id);
    }
    
    public boolean CaracteristicaDataOnDemand.modifyCaracteristica(Caracteristica obj) {
        return false;
    }
    
    public void CaracteristicaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Caracteristica.findCaracteristicaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Caracteristica' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Caracteristica>();
        for (int i = 0; i < 10; i++) {
            Caracteristica obj = getNewTransientCaracteristica(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
