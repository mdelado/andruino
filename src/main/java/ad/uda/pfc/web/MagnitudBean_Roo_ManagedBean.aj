// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ad.uda.pfc.web;

import ad.uda.pfc.domain.Caracteristica;
import ad.uda.pfc.domain.Magnitud;
import ad.uda.pfc.web.MagnitudBean;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect MagnitudBean_Roo_ManagedBean {
    
    declare @type: MagnitudBean: @ManagedBean(name = "magnitudBean");
    
    declare @type: MagnitudBean: @SessionScoped;
    
    private String MagnitudBean.name = "Magnituds";
    
    private Magnitud MagnitudBean.magnitud;
    
    private List<Magnitud> MagnitudBean.allMagnituds;
    
    private boolean MagnitudBean.dataVisible = false;
    
    private List<String> MagnitudBean.columns;
    
    private HtmlPanelGrid MagnitudBean.createPanelGrid;
    
    private HtmlPanelGrid MagnitudBean.editPanelGrid;
    
    private HtmlPanelGrid MagnitudBean.viewPanelGrid;
    
    private boolean MagnitudBean.createDialogVisible = false;
    
    private List<Caracteristica> MagnitudBean.selectedCaracteristicas;
    
    @PostConstruct
    public void MagnitudBean.init() {
        columns = new ArrayList<String>();
        columns.add("nom");
        columns.add("simbol");
    }
    
    public String MagnitudBean.getName() {
        return name;
    }
    
    public List<String> MagnitudBean.getColumns() {
        return columns;
    }
    
    public List<Magnitud> MagnitudBean.getAllMagnituds() {
        return allMagnituds;
    }
    
    public void MagnitudBean.setAllMagnituds(List<Magnitud> allMagnituds) {
        this.allMagnituds = allMagnituds;
    }
    
    public String MagnitudBean.findAllMagnituds() {
        allMagnituds = Magnitud.findAllMagnituds();
        dataVisible = !allMagnituds.isEmpty();
        return null;
    }
    
    public boolean MagnitudBean.isDataVisible() {
        return dataVisible;
    }
    
    public void MagnitudBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid MagnitudBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void MagnitudBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid MagnitudBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void MagnitudBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid MagnitudBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void MagnitudBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid MagnitudBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText caracteristicasCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasCreateOutput.setId("caracteristicasCreateOutput");
        caracteristicasCreateOutput.setValue("Caracteristicas:   ");
        htmlPanelGrid.getChildren().add(caracteristicasCreateOutput);
        
        HtmlOutputText caracteristicasCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasCreateInput.setId("caracteristicasCreateInput");
        caracteristicasCreateInput.setValue("This relationship is managed from the Caracteristica side");
        htmlPanelGrid.getChildren().add(caracteristicasCreateInput);
        
        Message caracteristicasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        caracteristicasCreateInputMessage.setId("caracteristicasCreateInputMessage");
        caracteristicasCreateInputMessage.setFor("caracteristicasCreateInput");
        caracteristicasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(caracteristicasCreateInputMessage);
        
        HtmlOutputText nomCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomCreateOutput.setId("nomCreateOutput");
        nomCreateOutput.setValue("Nom: * ");
        htmlPanelGrid.getChildren().add(nomCreateOutput);
        
        InputTextarea nomCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nomCreateInput.setId("nomCreateInput");
        nomCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{magnitudBean.magnitud.nom}", String.class));
        LengthValidator nomCreateInputValidator = new LengthValidator();
        nomCreateInputValidator.setMaximum(250);
        nomCreateInput.addValidator(nomCreateInputValidator);
        nomCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomCreateInput);
        
        Message nomCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomCreateInputMessage.setId("nomCreateInputMessage");
        nomCreateInputMessage.setFor("nomCreateInput");
        nomCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomCreateInputMessage);
        
        HtmlOutputText simbolCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        simbolCreateOutput.setId("simbolCreateOutput");
        simbolCreateOutput.setValue("Simbol: * ");
        htmlPanelGrid.getChildren().add(simbolCreateOutput);
        
        InputText simbolCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        simbolCreateInput.setId("simbolCreateInput");
        simbolCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{magnitudBean.magnitud.simbol}", String.class));
        LengthValidator simbolCreateInputValidator = new LengthValidator();
        simbolCreateInputValidator.setMaximum(10);
        simbolCreateInput.addValidator(simbolCreateInputValidator);
        simbolCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(simbolCreateInput);
        
        Message simbolCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        simbolCreateInputMessage.setId("simbolCreateInputMessage");
        simbolCreateInputMessage.setFor("simbolCreateInput");
        simbolCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(simbolCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid MagnitudBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText caracteristicasEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasEditOutput.setId("caracteristicasEditOutput");
        caracteristicasEditOutput.setValue("Caracteristicas:   ");
        htmlPanelGrid.getChildren().add(caracteristicasEditOutput);
        
        HtmlOutputText caracteristicasEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasEditInput.setId("caracteristicasEditInput");
        caracteristicasEditInput.setValue("This relationship is managed from the Caracteristica side");
        htmlPanelGrid.getChildren().add(caracteristicasEditInput);
        
        Message caracteristicasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        caracteristicasEditInputMessage.setId("caracteristicasEditInputMessage");
        caracteristicasEditInputMessage.setFor("caracteristicasEditInput");
        caracteristicasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(caracteristicasEditInputMessage);
        
        HtmlOutputText nomEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomEditOutput.setId("nomEditOutput");
        nomEditOutput.setValue("Nom: * ");
        htmlPanelGrid.getChildren().add(nomEditOutput);
        
        InputTextarea nomEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nomEditInput.setId("nomEditInput");
        nomEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{magnitudBean.magnitud.nom}", String.class));
        LengthValidator nomEditInputValidator = new LengthValidator();
        nomEditInputValidator.setMaximum(250);
        nomEditInput.addValidator(nomEditInputValidator);
        nomEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomEditInput);
        
        Message nomEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomEditInputMessage.setId("nomEditInputMessage");
        nomEditInputMessage.setFor("nomEditInput");
        nomEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomEditInputMessage);
        
        HtmlOutputText simbolEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        simbolEditOutput.setId("simbolEditOutput");
        simbolEditOutput.setValue("Simbol: * ");
        htmlPanelGrid.getChildren().add(simbolEditOutput);
        
        InputText simbolEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        simbolEditInput.setId("simbolEditInput");
        simbolEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{magnitudBean.magnitud.simbol}", String.class));
        LengthValidator simbolEditInputValidator = new LengthValidator();
        simbolEditInputValidator.setMaximum(10);
        simbolEditInput.addValidator(simbolEditInputValidator);
        simbolEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(simbolEditInput);
        
        Message simbolEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        simbolEditInputMessage.setId("simbolEditInputMessage");
        simbolEditInputMessage.setFor("simbolEditInput");
        simbolEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(simbolEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid MagnitudBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText caracteristicasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasLabel.setId("caracteristicasLabel");
        caracteristicasLabel.setValue("Caracteristicas:   ");
        htmlPanelGrid.getChildren().add(caracteristicasLabel);
        
        HtmlOutputText caracteristicasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasValue.setId("caracteristicasValue");
        caracteristicasValue.setValue("This relationship is managed from the Caracteristica side");
        htmlPanelGrid.getChildren().add(caracteristicasValue);
        
        HtmlOutputText nomLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomLabel.setId("nomLabel");
        nomLabel.setValue("Nom:   ");
        htmlPanelGrid.getChildren().add(nomLabel);
        
        InputTextarea nomValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nomValue.setId("nomValue");
        nomValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{magnitudBean.magnitud.nom}", String.class));
        nomValue.setReadonly(true);
        nomValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nomValue);
        
        HtmlOutputText simbolLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        simbolLabel.setId("simbolLabel");
        simbolLabel.setValue("Simbol:   ");
        htmlPanelGrid.getChildren().add(simbolLabel);
        
        HtmlOutputText simbolValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        simbolValue.setId("simbolValue");
        simbolValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{magnitudBean.magnitud.simbol}", String.class));
        htmlPanelGrid.getChildren().add(simbolValue);
        
        return htmlPanelGrid;
    }
    
    public Magnitud MagnitudBean.getMagnitud() {
        if (magnitud == null) {
            magnitud = new Magnitud();
        }
        return magnitud;
    }
    
    public void MagnitudBean.setMagnitud(Magnitud magnitud) {
        this.magnitud = magnitud;
    }
    
    public List<Caracteristica> MagnitudBean.getSelectedCaracteristicas() {
        return selectedCaracteristicas;
    }
    
    public void MagnitudBean.setSelectedCaracteristicas(List<Caracteristica> selectedCaracteristicas) {
        if (selectedCaracteristicas != null) {
            magnitud.setCaracteristicas(new HashSet<Caracteristica>(selectedCaracteristicas));
        }
        this.selectedCaracteristicas = selectedCaracteristicas;
    }
    
    public String MagnitudBean.onEdit() {
        if (magnitud != null && magnitud.getCaracteristicas() != null) {
            selectedCaracteristicas = new ArrayList<Caracteristica>(magnitud.getCaracteristicas());
        }
        return null;
    }
    
    public boolean MagnitudBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void MagnitudBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String MagnitudBean.displayList() {
        createDialogVisible = false;
        findAllMagnituds();
        return "magnitud";
    }
    
    public String MagnitudBean.displayCreateDialog() {
        magnitud = new Magnitud();
        createDialogVisible = true;
        return "magnitud";
    }
    
    public String MagnitudBean.persist() {
        String message = "";
        if (magnitud.getId() != null) {
            magnitud.merge();
            message = "Successfully updated";
        } else {
            magnitud.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMagnituds();
    }
    
    public String MagnitudBean.delete() {
        magnitud.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMagnituds();
    }
    
    public void MagnitudBean.reset() {
        magnitud = null;
        selectedCaracteristicas = null;
        createDialogVisible = false;
    }
    
    public void MagnitudBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
