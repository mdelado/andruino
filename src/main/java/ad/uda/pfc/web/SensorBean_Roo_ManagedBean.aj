// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ad.uda.pfc.web;

import ad.uda.pfc.domain.Caracteristica;
import ad.uda.pfc.domain.Habitacle;
import ad.uda.pfc.domain.PinArduino;
import ad.uda.pfc.domain.Sensor;
import ad.uda.pfc.domain.TipusSensor;
import ad.uda.pfc.web.SensorBean;
import ad.uda.pfc.web.converter.HabitacleConverter;
import ad.uda.pfc.web.converter.TipusSensorConverter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect SensorBean_Roo_ManagedBean {
    
    declare @type: SensorBean: @ManagedBean(name = "sensorBean");
    
    declare @type: SensorBean: @SessionScoped;
    
    private String SensorBean.name = "Sensors";
    
    private Sensor SensorBean.sensor;
    
    private List<Sensor> SensorBean.allSensors;
    
    private boolean SensorBean.dataVisible = false;
    
    private List<String> SensorBean.columns;
    
    private HtmlPanelGrid SensorBean.createPanelGrid;
    
    private HtmlPanelGrid SensorBean.editPanelGrid;
    
    private HtmlPanelGrid SensorBean.viewPanelGrid;
    
    private boolean SensorBean.createDialogVisible = false;
    
    private List<Caracteristica> SensorBean.selectedCaracteristicas;
    
    private List<PinArduino> SensorBean.selectedPinArduinoes;
    
    @PostConstruct
    public void SensorBean.init() {
        columns = new ArrayList<String>();
        columns.add("descripcio");
    }
    
    public String SensorBean.getName() {
        return name;
    }
    
    public List<String> SensorBean.getColumns() {
        return columns;
    }
    
    public List<Sensor> SensorBean.getAllSensors() {
        return allSensors;
    }
    
    public void SensorBean.setAllSensors(List<Sensor> allSensors) {
        this.allSensors = allSensors;
    }
    
    public String SensorBean.findAllSensors() {
        allSensors = Sensor.findAllSensors();
        dataVisible = !allSensors.isEmpty();
        return null;
    }
    
    public boolean SensorBean.isDataVisible() {
        return dataVisible;
    }
    
    public void SensorBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid SensorBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void SensorBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid SensorBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void SensorBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid SensorBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void SensorBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid SensorBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText caracteristicasCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasCreateOutput.setId("caracteristicasCreateOutput");
        caracteristicasCreateOutput.setValue("Caracteristicas:   ");
        htmlPanelGrid.getChildren().add(caracteristicasCreateOutput);
        
        HtmlOutputText caracteristicasCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasCreateInput.setId("caracteristicasCreateInput");
        caracteristicasCreateInput.setValue("This relationship is managed from the Caracteristica side");
        htmlPanelGrid.getChildren().add(caracteristicasCreateInput);
        
        Message caracteristicasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        caracteristicasCreateInputMessage.setId("caracteristicasCreateInputMessage");
        caracteristicasCreateInputMessage.setFor("caracteristicasCreateInput");
        caracteristicasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(caracteristicasCreateInputMessage);
        
        HtmlOutputText pinArduinoesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinArduinoesCreateOutput.setId("pinArduinoesCreateOutput");
        pinArduinoesCreateOutput.setValue("Pin Arduinoes:   ");
        htmlPanelGrid.getChildren().add(pinArduinoesCreateOutput);
        
        HtmlOutputText pinArduinoesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinArduinoesCreateInput.setId("pinArduinoesCreateInput");
        pinArduinoesCreateInput.setValue("This relationship is managed from the PinArduino side");
        htmlPanelGrid.getChildren().add(pinArduinoesCreateInput);
        
        Message pinArduinoesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pinArduinoesCreateInputMessage.setId("pinArduinoesCreateInputMessage");
        pinArduinoesCreateInputMessage.setFor("pinArduinoesCreateInput");
        pinArduinoesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pinArduinoesCreateInputMessage);
        
        HtmlOutputText idHabitacleCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idHabitacleCreateOutput.setId("idHabitacleCreateOutput");
        idHabitacleCreateOutput.setValue("Id Habitacle:   ");
        htmlPanelGrid.getChildren().add(idHabitacleCreateOutput);
        
        AutoComplete idHabitacleCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idHabitacleCreateInput.setId("idHabitacleCreateInput");
        idHabitacleCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.idHabitacle}", Habitacle.class));
        idHabitacleCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{sensorBean.completeIdHabitacle}", List.class, new Class[] { String.class }));
        idHabitacleCreateInput.setDropdown(true);
        idHabitacleCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idHabitacle", String.class));
        idHabitacleCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idHabitacle.descripcio}", String.class));
        idHabitacleCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idHabitacle}", Habitacle.class));
        idHabitacleCreateInput.setConverter(new HabitacleConverter());
        idHabitacleCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idHabitacleCreateInput);
        
        Message idHabitacleCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idHabitacleCreateInputMessage.setId("idHabitacleCreateInputMessage");
        idHabitacleCreateInputMessage.setFor("idHabitacleCreateInput");
        idHabitacleCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idHabitacleCreateInputMessage);
        
        HtmlOutputText idTipusSensorCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idTipusSensorCreateOutput.setId("idTipusSensorCreateOutput");
        idTipusSensorCreateOutput.setValue("Id Tipus Sensor:   ");
        htmlPanelGrid.getChildren().add(idTipusSensorCreateOutput);
        
        AutoComplete idTipusSensorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idTipusSensorCreateInput.setId("idTipusSensorCreateInput");
        idTipusSensorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.idTipusSensor}", TipusSensor.class));
        idTipusSensorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{sensorBean.completeIdTipusSensor}", List.class, new Class[] { String.class }));
        idTipusSensorCreateInput.setDropdown(true);
        idTipusSensorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idTipusSensor", String.class));
        idTipusSensorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idTipusSensor.nom}", String.class));
        idTipusSensorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idTipusSensor}", TipusSensor.class));
        idTipusSensorCreateInput.setConverter(new TipusSensorConverter());
        idTipusSensorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idTipusSensorCreateInput);
        
        Message idTipusSensorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idTipusSensorCreateInputMessage.setId("idTipusSensorCreateInputMessage");
        idTipusSensorCreateInputMessage.setFor("idTipusSensorCreateInput");
        idTipusSensorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idTipusSensorCreateInputMessage);
        
        HtmlOutputText descripcioCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioCreateOutput.setId("descripcioCreateOutput");
        descripcioCreateOutput.setValue("Descripcio: * ");
        htmlPanelGrid.getChildren().add(descripcioCreateOutput);
        
        InputTextarea descripcioCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioCreateInput.setId("descripcioCreateInput");
        descripcioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.descripcio}", String.class));
        LengthValidator descripcioCreateInputValidator = new LengthValidator();
        descripcioCreateInputValidator.setMaximum(250);
        descripcioCreateInput.addValidator(descripcioCreateInputValidator);
        descripcioCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcioCreateInput);
        
        Message descripcioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcioCreateInputMessage.setId("descripcioCreateInputMessage");
        descripcioCreateInputMessage.setFor("descripcioCreateInput");
        descripcioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcioCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SensorBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText caracteristicasEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasEditOutput.setId("caracteristicasEditOutput");
        caracteristicasEditOutput.setValue("Caracteristicas:   ");
        htmlPanelGrid.getChildren().add(caracteristicasEditOutput);
        
        HtmlOutputText caracteristicasEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasEditInput.setId("caracteristicasEditInput");
        caracteristicasEditInput.setValue("This relationship is managed from the Caracteristica side");
        htmlPanelGrid.getChildren().add(caracteristicasEditInput);
        
        Message caracteristicasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        caracteristicasEditInputMessage.setId("caracteristicasEditInputMessage");
        caracteristicasEditInputMessage.setFor("caracteristicasEditInput");
        caracteristicasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(caracteristicasEditInputMessage);
        
        HtmlOutputText pinArduinoesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinArduinoesEditOutput.setId("pinArduinoesEditOutput");
        pinArduinoesEditOutput.setValue("Pin Arduinoes:   ");
        htmlPanelGrid.getChildren().add(pinArduinoesEditOutput);
        
        HtmlOutputText pinArduinoesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinArduinoesEditInput.setId("pinArduinoesEditInput");
        pinArduinoesEditInput.setValue("This relationship is managed from the PinArduino side");
        htmlPanelGrid.getChildren().add(pinArduinoesEditInput);
        
        Message pinArduinoesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pinArduinoesEditInputMessage.setId("pinArduinoesEditInputMessage");
        pinArduinoesEditInputMessage.setFor("pinArduinoesEditInput");
        pinArduinoesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pinArduinoesEditInputMessage);
        
        HtmlOutputText idHabitacleEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idHabitacleEditOutput.setId("idHabitacleEditOutput");
        idHabitacleEditOutput.setValue("Id Habitacle:   ");
        htmlPanelGrid.getChildren().add(idHabitacleEditOutput);
        
        AutoComplete idHabitacleEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idHabitacleEditInput.setId("idHabitacleEditInput");
        idHabitacleEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.idHabitacle}", Habitacle.class));
        idHabitacleEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{sensorBean.completeIdHabitacle}", List.class, new Class[] { String.class }));
        idHabitacleEditInput.setDropdown(true);
        idHabitacleEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idHabitacle", String.class));
        idHabitacleEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idHabitacle.descripcio}", String.class));
        idHabitacleEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idHabitacle}", Habitacle.class));
        idHabitacleEditInput.setConverter(new HabitacleConverter());
        idHabitacleEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idHabitacleEditInput);
        
        Message idHabitacleEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idHabitacleEditInputMessage.setId("idHabitacleEditInputMessage");
        idHabitacleEditInputMessage.setFor("idHabitacleEditInput");
        idHabitacleEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idHabitacleEditInputMessage);
        
        HtmlOutputText idTipusSensorEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idTipusSensorEditOutput.setId("idTipusSensorEditOutput");
        idTipusSensorEditOutput.setValue("Id Tipus Sensor:   ");
        htmlPanelGrid.getChildren().add(idTipusSensorEditOutput);
        
        AutoComplete idTipusSensorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idTipusSensorEditInput.setId("idTipusSensorEditInput");
        idTipusSensorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.idTipusSensor}", TipusSensor.class));
        idTipusSensorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{sensorBean.completeIdTipusSensor}", List.class, new Class[] { String.class }));
        idTipusSensorEditInput.setDropdown(true);
        idTipusSensorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idTipusSensor", String.class));
        idTipusSensorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idTipusSensor.nom}", String.class));
        idTipusSensorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idTipusSensor}", TipusSensor.class));
        idTipusSensorEditInput.setConverter(new TipusSensorConverter());
        idTipusSensorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idTipusSensorEditInput);
        
        Message idTipusSensorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idTipusSensorEditInputMessage.setId("idTipusSensorEditInputMessage");
        idTipusSensorEditInputMessage.setFor("idTipusSensorEditInput");
        idTipusSensorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idTipusSensorEditInputMessage);
        
        HtmlOutputText descripcioEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioEditOutput.setId("descripcioEditOutput");
        descripcioEditOutput.setValue("Descripcio: * ");
        htmlPanelGrid.getChildren().add(descripcioEditOutput);
        
        InputTextarea descripcioEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioEditInput.setId("descripcioEditInput");
        descripcioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.descripcio}", String.class));
        LengthValidator descripcioEditInputValidator = new LengthValidator();
        descripcioEditInputValidator.setMaximum(250);
        descripcioEditInput.addValidator(descripcioEditInputValidator);
        descripcioEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcioEditInput);
        
        Message descripcioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcioEditInputMessage.setId("descripcioEditInputMessage");
        descripcioEditInputMessage.setFor("descripcioEditInput");
        descripcioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcioEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid SensorBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText caracteristicasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasLabel.setId("caracteristicasLabel");
        caracteristicasLabel.setValue("Caracteristicas:   ");
        htmlPanelGrid.getChildren().add(caracteristicasLabel);
        
        HtmlOutputText caracteristicasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caracteristicasValue.setId("caracteristicasValue");
        caracteristicasValue.setValue("This relationship is managed from the Caracteristica side");
        htmlPanelGrid.getChildren().add(caracteristicasValue);
        
        HtmlOutputText pinArduinoesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinArduinoesLabel.setId("pinArduinoesLabel");
        pinArduinoesLabel.setValue("Pin Arduinoes:   ");
        htmlPanelGrid.getChildren().add(pinArduinoesLabel);
        
        HtmlOutputText pinArduinoesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pinArduinoesValue.setId("pinArduinoesValue");
        pinArduinoesValue.setValue("This relationship is managed from the PinArduino side");
        htmlPanelGrid.getChildren().add(pinArduinoesValue);
        
        HtmlOutputText idHabitacleLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idHabitacleLabel.setId("idHabitacleLabel");
        idHabitacleLabel.setValue("Id Habitacle:   ");
        htmlPanelGrid.getChildren().add(idHabitacleLabel);
        
        HtmlOutputText idHabitacleValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idHabitacleValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.idHabitacle}", Habitacle.class));
        idHabitacleValue.setConverter(new HabitacleConverter());
        htmlPanelGrid.getChildren().add(idHabitacleValue);
        
        HtmlOutputText idTipusSensorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idTipusSensorLabel.setId("idTipusSensorLabel");
        idTipusSensorLabel.setValue("Id Tipus Sensor:   ");
        htmlPanelGrid.getChildren().add(idTipusSensorLabel);
        
        HtmlOutputText idTipusSensorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idTipusSensorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.idTipusSensor}", TipusSensor.class));
        idTipusSensorValue.setConverter(new TipusSensorConverter());
        htmlPanelGrid.getChildren().add(idTipusSensorValue);
        
        HtmlOutputText descripcioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioLabel.setId("descripcioLabel");
        descripcioLabel.setValue("Descripcio:   ");
        htmlPanelGrid.getChildren().add(descripcioLabel);
        
        InputTextarea descripcioValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioValue.setId("descripcioValue");
        descripcioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{sensorBean.sensor.descripcio}", String.class));
        descripcioValue.setReadonly(true);
        descripcioValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descripcioValue);
        
        return htmlPanelGrid;
    }
    
    public Sensor SensorBean.getSensor() {
        if (sensor == null) {
            sensor = new Sensor();
        }
        return sensor;
    }
    
    public void SensorBean.setSensor(Sensor sensor) {
        this.sensor = sensor;
    }
    
    public List<Caracteristica> SensorBean.getSelectedCaracteristicas() {
        return selectedCaracteristicas;
    }
    
    public void SensorBean.setSelectedCaracteristicas(List<Caracteristica> selectedCaracteristicas) {
        if (selectedCaracteristicas != null) {
            sensor.setCaracteristicas(new HashSet<Caracteristica>(selectedCaracteristicas));
        }
        this.selectedCaracteristicas = selectedCaracteristicas;
    }
    
    public List<PinArduino> SensorBean.getSelectedPinArduinoes() {
        return selectedPinArduinoes;
    }
    
    public void SensorBean.setSelectedPinArduinoes(List<PinArduino> selectedPinArduinoes) {
        if (selectedPinArduinoes != null) {
            sensor.setPinArduinoes(new HashSet<PinArduino>(selectedPinArduinoes));
        }
        this.selectedPinArduinoes = selectedPinArduinoes;
    }
    
    public List<Habitacle> SensorBean.completeIdHabitacle(String query) {
        List<Habitacle> suggestions = new ArrayList<Habitacle>();
        for (Habitacle habitacle : Habitacle.findAllHabitacles()) {
            String habitacleStr = String.valueOf(habitacle.getDescripcio());
            if (habitacleStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(habitacle);
            }
        }
        return suggestions;
    }
    
    public List<TipusSensor> SensorBean.completeIdTipusSensor(String query) {
        List<TipusSensor> suggestions = new ArrayList<TipusSensor>();
        for (TipusSensor tipusSensor : TipusSensor.findAllTipusSensors()) {
            String tipusSensorStr = String.valueOf(tipusSensor.getNom());
            if (tipusSensorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipusSensor);
            }
        }
        return suggestions;
    }
    
    public String SensorBean.onEdit() {
        if (sensor != null && sensor.getCaracteristicas() != null) {
            selectedCaracteristicas = new ArrayList<Caracteristica>(sensor.getCaracteristicas());
        }
        if (sensor != null && sensor.getPinArduinoes() != null) {
            selectedPinArduinoes = new ArrayList<PinArduino>(sensor.getPinArduinoes());
        }
        return null;
    }
    
    public boolean SensorBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void SensorBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String SensorBean.displayList() {
        createDialogVisible = false;
        findAllSensors();
        return "sensor";
    }
    
    public String SensorBean.displayCreateDialog() {
        sensor = new Sensor();
        createDialogVisible = true;
        return "sensor";
    }
    
    public String SensorBean.persist() {
        String message = "";
        if (sensor.getId() != null) {
            sensor.merge();
            message = "Successfully updated";
        } else {
            sensor.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSensors();
    }
    
    public String SensorBean.delete() {
        sensor.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllSensors();
    }
    
    public void SensorBean.reset() {
        sensor = null;
        selectedCaracteristicas = null;
        selectedPinArduinoes = null;
        createDialogVisible = false;
    }
    
    public void SensorBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
