// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ad.uda.pfc.web;

import ad.uda.pfc.domain.PinArduino;
import ad.uda.pfc.domain.PlacaArduino;
import ad.uda.pfc.domain.Sensor;
import ad.uda.pfc.web.PinArduinoBean;
import ad.uda.pfc.web.converter.PlacaArduinoConverter;
import ad.uda.pfc.web.converter.SensorConverter;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PinArduinoBean_Roo_ManagedBean {
    
    declare @type: PinArduinoBean: @ManagedBean(name = "pinArduinoBean");
    
    declare @type: PinArduinoBean: @SessionScoped;
    
    private String PinArduinoBean.name = "PinArduinoes";
    
    private PinArduino PinArduinoBean.pinArduino;
    
    private List<PinArduino> PinArduinoBean.allPinArduinoes;
    
    private boolean PinArduinoBean.dataVisible = false;
    
    private List<String> PinArduinoBean.columns;
    
    private HtmlPanelGrid PinArduinoBean.createPanelGrid;
    
    private HtmlPanelGrid PinArduinoBean.editPanelGrid;
    
    private HtmlPanelGrid PinArduinoBean.viewPanelGrid;
    
    private boolean PinArduinoBean.createDialogVisible = false;
    
    @PostConstruct
    public void PinArduinoBean.init() {
        columns = new ArrayList<String>();
        columns.add("numPin");
    }
    
    public String PinArduinoBean.getName() {
        return name;
    }
    
    public List<String> PinArduinoBean.getColumns() {
        return columns;
    }
    
    public List<PinArduino> PinArduinoBean.getAllPinArduinoes() {
        return allPinArduinoes;
    }
    
    public void PinArduinoBean.setAllPinArduinoes(List<PinArduino> allPinArduinoes) {
        this.allPinArduinoes = allPinArduinoes;
    }
    
    public String PinArduinoBean.findAllPinArduinoes() {
        allPinArduinoes = PinArduino.findAllPinArduinoes();
        dataVisible = !allPinArduinoes.isEmpty();
        return null;
    }
    
    public boolean PinArduinoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PinArduinoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PinArduinoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PinArduinoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PinArduinoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PinArduinoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PinArduinoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PinArduinoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PinArduinoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idPlacaArduinoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idPlacaArduinoCreateOutput.setId("idPlacaArduinoCreateOutput");
        idPlacaArduinoCreateOutput.setValue("Id Placa Arduino:   ");
        htmlPanelGrid.getChildren().add(idPlacaArduinoCreateOutput);
        
        AutoComplete idPlacaArduinoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idPlacaArduinoCreateInput.setId("idPlacaArduinoCreateInput");
        idPlacaArduinoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.idPlacaArduino}", PlacaArduino.class));
        idPlacaArduinoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pinArduinoBean.completeIdPlacaArduino}", List.class, new Class[] { String.class }));
        idPlacaArduinoCreateInput.setDropdown(true);
        idPlacaArduinoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idPlacaArduino", String.class));
        idPlacaArduinoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idPlacaArduino.descripcio} #{idPlacaArduino.nom} #{idPlacaArduino.versio}", String.class));
        idPlacaArduinoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idPlacaArduino}", PlacaArduino.class));
        idPlacaArduinoCreateInput.setConverter(new PlacaArduinoConverter());
        idPlacaArduinoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idPlacaArduinoCreateInput);
        
        Message idPlacaArduinoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idPlacaArduinoCreateInputMessage.setId("idPlacaArduinoCreateInputMessage");
        idPlacaArduinoCreateInputMessage.setFor("idPlacaArduinoCreateInput");
        idPlacaArduinoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idPlacaArduinoCreateInputMessage);
        
        HtmlOutputText idSensorCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorCreateOutput.setId("idSensorCreateOutput");
        idSensorCreateOutput.setValue("Id Sensor:   ");
        htmlPanelGrid.getChildren().add(idSensorCreateOutput);
        
        AutoComplete idSensorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idSensorCreateInput.setId("idSensorCreateInput");
        idSensorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.idSensor}", Sensor.class));
        idSensorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pinArduinoBean.completeIdSensor}", List.class, new Class[] { String.class }));
        idSensorCreateInput.setDropdown(true);
        idSensorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idSensor", String.class));
        idSensorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idSensor.descripcio}", String.class));
        idSensorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idSensor}", Sensor.class));
        idSensorCreateInput.setConverter(new SensorConverter());
        idSensorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idSensorCreateInput);
        
        Message idSensorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idSensorCreateInputMessage.setId("idSensorCreateInputMessage");
        idSensorCreateInputMessage.setFor("idSensorCreateInput");
        idSensorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idSensorCreateInputMessage);
        
        HtmlOutputText numPinCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numPinCreateOutput.setId("numPinCreateOutput");
        numPinCreateOutput.setValue("Num Pin:   ");
        htmlPanelGrid.getChildren().add(numPinCreateOutput);
        
        Spinner numPinCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numPinCreateInput.setId("numPinCreateInput");
        numPinCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.numPin}", Integer.class));
        numPinCreateInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numPinCreateInput);
        
        Message numPinCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numPinCreateInputMessage.setId("numPinCreateInputMessage");
        numPinCreateInputMessage.setFor("numPinCreateInput");
        numPinCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numPinCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PinArduinoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idPlacaArduinoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idPlacaArduinoEditOutput.setId("idPlacaArduinoEditOutput");
        idPlacaArduinoEditOutput.setValue("Id Placa Arduino:   ");
        htmlPanelGrid.getChildren().add(idPlacaArduinoEditOutput);
        
        AutoComplete idPlacaArduinoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idPlacaArduinoEditInput.setId("idPlacaArduinoEditInput");
        idPlacaArduinoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.idPlacaArduino}", PlacaArduino.class));
        idPlacaArduinoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pinArduinoBean.completeIdPlacaArduino}", List.class, new Class[] { String.class }));
        idPlacaArduinoEditInput.setDropdown(true);
        idPlacaArduinoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idPlacaArduino", String.class));
        idPlacaArduinoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idPlacaArduino.descripcio} #{idPlacaArduino.nom} #{idPlacaArduino.versio}", String.class));
        idPlacaArduinoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idPlacaArduino}", PlacaArduino.class));
        idPlacaArduinoEditInput.setConverter(new PlacaArduinoConverter());
        idPlacaArduinoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idPlacaArduinoEditInput);
        
        Message idPlacaArduinoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idPlacaArduinoEditInputMessage.setId("idPlacaArduinoEditInputMessage");
        idPlacaArduinoEditInputMessage.setFor("idPlacaArduinoEditInput");
        idPlacaArduinoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idPlacaArduinoEditInputMessage);
        
        HtmlOutputText idSensorEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorEditOutput.setId("idSensorEditOutput");
        idSensorEditOutput.setValue("Id Sensor:   ");
        htmlPanelGrid.getChildren().add(idSensorEditOutput);
        
        AutoComplete idSensorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idSensorEditInput.setId("idSensorEditInput");
        idSensorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.idSensor}", Sensor.class));
        idSensorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pinArduinoBean.completeIdSensor}", List.class, new Class[] { String.class }));
        idSensorEditInput.setDropdown(true);
        idSensorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idSensor", String.class));
        idSensorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idSensor.descripcio}", String.class));
        idSensorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idSensor}", Sensor.class));
        idSensorEditInput.setConverter(new SensorConverter());
        idSensorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idSensorEditInput);
        
        Message idSensorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idSensorEditInputMessage.setId("idSensorEditInputMessage");
        idSensorEditInputMessage.setFor("idSensorEditInput");
        idSensorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idSensorEditInputMessage);
        
        HtmlOutputText numPinEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numPinEditOutput.setId("numPinEditOutput");
        numPinEditOutput.setValue("Num Pin:   ");
        htmlPanelGrid.getChildren().add(numPinEditOutput);
        
        Spinner numPinEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        numPinEditInput.setId("numPinEditInput");
        numPinEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.numPin}", Integer.class));
        numPinEditInput.setRequired(false);
        
        htmlPanelGrid.getChildren().add(numPinEditInput);
        
        Message numPinEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numPinEditInputMessage.setId("numPinEditInputMessage");
        numPinEditInputMessage.setFor("numPinEditInput");
        numPinEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numPinEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PinArduinoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idPlacaArduinoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idPlacaArduinoLabel.setId("idPlacaArduinoLabel");
        idPlacaArduinoLabel.setValue("Id Placa Arduino:   ");
        htmlPanelGrid.getChildren().add(idPlacaArduinoLabel);
        
        HtmlOutputText idPlacaArduinoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idPlacaArduinoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.idPlacaArduino}", PlacaArduino.class));
        idPlacaArduinoValue.setConverter(new PlacaArduinoConverter());
        htmlPanelGrid.getChildren().add(idPlacaArduinoValue);
        
        HtmlOutputText idSensorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorLabel.setId("idSensorLabel");
        idSensorLabel.setValue("Id Sensor:   ");
        htmlPanelGrid.getChildren().add(idSensorLabel);
        
        HtmlOutputText idSensorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.idSensor}", Sensor.class));
        idSensorValue.setConverter(new SensorConverter());
        htmlPanelGrid.getChildren().add(idSensorValue);
        
        HtmlOutputText numPinLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numPinLabel.setId("numPinLabel");
        numPinLabel.setValue("Num Pin:   ");
        htmlPanelGrid.getChildren().add(numPinLabel);
        
        HtmlOutputText numPinValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numPinValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pinArduinoBean.pinArduino.numPin}", String.class));
        htmlPanelGrid.getChildren().add(numPinValue);
        
        return htmlPanelGrid;
    }
    
    public PinArduino PinArduinoBean.getPinArduino() {
        if (pinArduino == null) {
            pinArduino = new PinArduino();
        }
        return pinArduino;
    }
    
    public void PinArduinoBean.setPinArduino(PinArduino pinArduino) {
        this.pinArduino = pinArduino;
    }
    
    public List<PlacaArduino> PinArduinoBean.completeIdPlacaArduino(String query) {
        List<PlacaArduino> suggestions = new ArrayList<PlacaArduino>();
        for (PlacaArduino placaArduino : PlacaArduino.findAllPlacaArduinoes()) {
            String placaArduinoStr = String.valueOf(placaArduino.getDescripcio() +  " "  + placaArduino.getNom() +  " "  + placaArduino.getVersio());
            if (placaArduinoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(placaArduino);
            }
        }
        return suggestions;
    }
    
    public List<Sensor> PinArduinoBean.completeIdSensor(String query) {
        List<Sensor> suggestions = new ArrayList<Sensor>();
        for (Sensor sensor : Sensor.findAllSensors()) {
            String sensorStr = String.valueOf(sensor.getDescripcio());
            if (sensorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(sensor);
            }
        }
        return suggestions;
    }
    
    public String PinArduinoBean.onEdit() {
        return null;
    }
    
    public boolean PinArduinoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PinArduinoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PinArduinoBean.displayList() {
        createDialogVisible = false;
        findAllPinArduinoes();
        return "pinArduino";
    }
    
    public String PinArduinoBean.displayCreateDialog() {
        pinArduino = new PinArduino();
        createDialogVisible = true;
        return "pinArduino";
    }
    
    public String PinArduinoBean.persist() {
        String message = "";
        if (pinArduino.getId() != null) {
            pinArduino.merge();
            message = "Successfully updated";
        } else {
            pinArduino.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPinArduinoes();
    }
    
    public String PinArduinoBean.delete() {
        pinArduino.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPinArduinoes();
    }
    
    public void PinArduinoBean.reset() {
        pinArduino = null;
        createDialogVisible = false;
    }
    
    public void PinArduinoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
