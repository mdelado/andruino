// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ad.uda.pfc.web;

import ad.uda.pfc.domain.Habitacle;
import ad.uda.pfc.domain.Sensor;
import ad.uda.pfc.web.HabitacleBean;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect HabitacleBean_Roo_ManagedBean {
    
    declare @type: HabitacleBean: @ManagedBean(name = "habitacleBean");
    
    declare @type: HabitacleBean: @SessionScoped;
    
    private String HabitacleBean.name = "Habitacles";
    
    private Habitacle HabitacleBean.habitacle;
    
    private List<Habitacle> HabitacleBean.allHabitacles;
    
    private boolean HabitacleBean.dataVisible = false;
    
    private List<String> HabitacleBean.columns;
    
    private HtmlPanelGrid HabitacleBean.createPanelGrid;
    
    private HtmlPanelGrid HabitacleBean.editPanelGrid;
    
    private HtmlPanelGrid HabitacleBean.viewPanelGrid;
    
    private boolean HabitacleBean.createDialogVisible = false;
    
    private List<Sensor> HabitacleBean.selectedSensors;
    
    @PostConstruct
    public void HabitacleBean.init() {
        columns = new ArrayList<String>();
        columns.add("descripcio");
    }
    
    public String HabitacleBean.getName() {
        return name;
    }
    
    public List<String> HabitacleBean.getColumns() {
        return columns;
    }
    
    public List<Habitacle> HabitacleBean.getAllHabitacles() {
        return allHabitacles;
    }
    
    public void HabitacleBean.setAllHabitacles(List<Habitacle> allHabitacles) {
        this.allHabitacles = allHabitacles;
    }
    
    public String HabitacleBean.findAllHabitacles() {
        allHabitacles = Habitacle.findAllHabitacles();
        dataVisible = !allHabitacles.isEmpty();
        return null;
    }
    
    public boolean HabitacleBean.isDataVisible() {
        return dataVisible;
    }
    
    public void HabitacleBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid HabitacleBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void HabitacleBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid HabitacleBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void HabitacleBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid HabitacleBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void HabitacleBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid HabitacleBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText sensorsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sensorsCreateOutput.setId("sensorsCreateOutput");
        sensorsCreateOutput.setValue("Sensors:   ");
        htmlPanelGrid.getChildren().add(sensorsCreateOutput);
        
        HtmlOutputText sensorsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sensorsCreateInput.setId("sensorsCreateInput");
        sensorsCreateInput.setValue("This relationship is managed from the Sensor side");
        htmlPanelGrid.getChildren().add(sensorsCreateInput);
        
        Message sensorsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sensorsCreateInputMessage.setId("sensorsCreateInputMessage");
        sensorsCreateInputMessage.setFor("sensorsCreateInput");
        sensorsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sensorsCreateInputMessage);
        
        HtmlOutputText descripcioCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioCreateOutput.setId("descripcioCreateOutput");
        descripcioCreateOutput.setValue("Descripcio: * ");
        htmlPanelGrid.getChildren().add(descripcioCreateOutput);
        
        InputTextarea descripcioCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioCreateInput.setId("descripcioCreateInput");
        descripcioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{habitacleBean.habitacle.descripcio}", String.class));
        LengthValidator descripcioCreateInputValidator = new LengthValidator();
        descripcioCreateInputValidator.setMaximum(250);
        descripcioCreateInput.addValidator(descripcioCreateInputValidator);
        descripcioCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcioCreateInput);
        
        Message descripcioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcioCreateInputMessage.setId("descripcioCreateInputMessage");
        descripcioCreateInputMessage.setFor("descripcioCreateInput");
        descripcioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcioCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid HabitacleBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText sensorsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sensorsEditOutput.setId("sensorsEditOutput");
        sensorsEditOutput.setValue("Sensors:   ");
        htmlPanelGrid.getChildren().add(sensorsEditOutput);
        
        HtmlOutputText sensorsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sensorsEditInput.setId("sensorsEditInput");
        sensorsEditInput.setValue("This relationship is managed from the Sensor side");
        htmlPanelGrid.getChildren().add(sensorsEditInput);
        
        Message sensorsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        sensorsEditInputMessage.setId("sensorsEditInputMessage");
        sensorsEditInputMessage.setFor("sensorsEditInput");
        sensorsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(sensorsEditInputMessage);
        
        HtmlOutputText descripcioEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioEditOutput.setId("descripcioEditOutput");
        descripcioEditOutput.setValue("Descripcio: * ");
        htmlPanelGrid.getChildren().add(descripcioEditOutput);
        
        InputTextarea descripcioEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioEditInput.setId("descripcioEditInput");
        descripcioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{habitacleBean.habitacle.descripcio}", String.class));
        LengthValidator descripcioEditInputValidator = new LengthValidator();
        descripcioEditInputValidator.setMaximum(250);
        descripcioEditInput.addValidator(descripcioEditInputValidator);
        descripcioEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcioEditInput);
        
        Message descripcioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcioEditInputMessage.setId("descripcioEditInputMessage");
        descripcioEditInputMessage.setFor("descripcioEditInput");
        descripcioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcioEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid HabitacleBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText sensorsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sensorsLabel.setId("sensorsLabel");
        sensorsLabel.setValue("Sensors:   ");
        htmlPanelGrid.getChildren().add(sensorsLabel);
        
        HtmlOutputText sensorsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        sensorsValue.setId("sensorsValue");
        sensorsValue.setValue("This relationship is managed from the Sensor side");
        htmlPanelGrid.getChildren().add(sensorsValue);
        
        HtmlOutputText descripcioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioLabel.setId("descripcioLabel");
        descripcioLabel.setValue("Descripcio:   ");
        htmlPanelGrid.getChildren().add(descripcioLabel);
        
        InputTextarea descripcioValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioValue.setId("descripcioValue");
        descripcioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{habitacleBean.habitacle.descripcio}", String.class));
        descripcioValue.setReadonly(true);
        descripcioValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descripcioValue);
        
        return htmlPanelGrid;
    }
    
    public Habitacle HabitacleBean.getHabitacle() {
        if (habitacle == null) {
            habitacle = new Habitacle();
        }
        return habitacle;
    }
    
    public void HabitacleBean.setHabitacle(Habitacle habitacle) {
        this.habitacle = habitacle;
    }
    
    public List<Sensor> HabitacleBean.getSelectedSensors() {
        return selectedSensors;
    }
    
    public void HabitacleBean.setSelectedSensors(List<Sensor> selectedSensors) {
        if (selectedSensors != null) {
            habitacle.setSensors(new HashSet<Sensor>(selectedSensors));
        }
        this.selectedSensors = selectedSensors;
    }
    
    public String HabitacleBean.onEdit() {
        if (habitacle != null && habitacle.getSensors() != null) {
            selectedSensors = new ArrayList<Sensor>(habitacle.getSensors());
        }
        return null;
    }
    
    public boolean HabitacleBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void HabitacleBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String HabitacleBean.displayList() {
        createDialogVisible = false;
        findAllHabitacles();
        return "habitacle";
    }
    
    public String HabitacleBean.displayCreateDialog() {
        habitacle = new Habitacle();
        createDialogVisible = true;
        return "habitacle";
    }
    
    public String HabitacleBean.persist() {
        String message = "";
        if (habitacle.getId() != null) {
            habitacle.merge();
            message = "Successfully updated";
        } else {
            habitacle.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllHabitacles();
    }
    
    public String HabitacleBean.delete() {
        habitacle.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllHabitacles();
    }
    
    public void HabitacleBean.reset() {
        habitacle = null;
        selectedSensors = null;
        createDialogVisible = false;
    }
    
    public void HabitacleBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
