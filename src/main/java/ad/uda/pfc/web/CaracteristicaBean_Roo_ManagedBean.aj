// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ad.uda.pfc.web;

import ad.uda.pfc.domain.Caracteristica;
import ad.uda.pfc.domain.Magnitud;
import ad.uda.pfc.domain.Sensor;
import ad.uda.pfc.web.CaracteristicaBean;
import ad.uda.pfc.web.converter.MagnitudConverter;
import ad.uda.pfc.web.converter.SensorConverter;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CaracteristicaBean_Roo_ManagedBean {
    
    declare @type: CaracteristicaBean: @ManagedBean(name = "caracteristicaBean");
    
    declare @type: CaracteristicaBean: @SessionScoped;
    
    private String CaracteristicaBean.name = "Caracteristicas";
    
    private Caracteristica CaracteristicaBean.caracteristica;
    
    private List<Caracteristica> CaracteristicaBean.allCaracteristicas;
    
    private boolean CaracteristicaBean.dataVisible = false;
    
    private List<String> CaracteristicaBean.columns;
    
    private HtmlPanelGrid CaracteristicaBean.createPanelGrid;
    
    private HtmlPanelGrid CaracteristicaBean.editPanelGrid;
    
    private HtmlPanelGrid CaracteristicaBean.viewPanelGrid;
    
    private boolean CaracteristicaBean.createDialogVisible = false;
    
    @PostConstruct
    public void CaracteristicaBean.init() {
        columns = new ArrayList<String>();
        columns.add("descripcio");
        columns.add("valor");
    }
    
    public String CaracteristicaBean.getName() {
        return name;
    }
    
    public List<String> CaracteristicaBean.getColumns() {
        return columns;
    }
    
    public List<Caracteristica> CaracteristicaBean.getAllCaracteristicas() {
        return allCaracteristicas;
    }
    
    public void CaracteristicaBean.setAllCaracteristicas(List<Caracteristica> allCaracteristicas) {
        this.allCaracteristicas = allCaracteristicas;
    }
    
    public String CaracteristicaBean.findAllCaracteristicas() {
        allCaracteristicas = Caracteristica.findAllCaracteristicas();
        dataVisible = !allCaracteristicas.isEmpty();
        return null;
    }
    
    public boolean CaracteristicaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CaracteristicaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CaracteristicaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CaracteristicaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CaracteristicaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CaracteristicaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CaracteristicaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CaracteristicaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CaracteristicaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idMagnitudCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idMagnitudCreateOutput.setId("idMagnitudCreateOutput");
        idMagnitudCreateOutput.setValue("Id Magnitud:   ");
        htmlPanelGrid.getChildren().add(idMagnitudCreateOutput);
        
        AutoComplete idMagnitudCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idMagnitudCreateInput.setId("idMagnitudCreateInput");
        idMagnitudCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.idMagnitud}", Magnitud.class));
        idMagnitudCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{caracteristicaBean.completeIdMagnitud}", List.class, new Class[] { String.class }));
        idMagnitudCreateInput.setDropdown(true);
        idMagnitudCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idMagnitud", String.class));
        idMagnitudCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idMagnitud.nom} #{idMagnitud.simbol}", String.class));
        idMagnitudCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idMagnitud}", Magnitud.class));
        idMagnitudCreateInput.setConverter(new MagnitudConverter());
        idMagnitudCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idMagnitudCreateInput);
        
        Message idMagnitudCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idMagnitudCreateInputMessage.setId("idMagnitudCreateInputMessage");
        idMagnitudCreateInputMessage.setFor("idMagnitudCreateInput");
        idMagnitudCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idMagnitudCreateInputMessage);
        
        HtmlOutputText idSensorCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorCreateOutput.setId("idSensorCreateOutput");
        idSensorCreateOutput.setValue("Id Sensor:   ");
        htmlPanelGrid.getChildren().add(idSensorCreateOutput);
        
        AutoComplete idSensorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idSensorCreateInput.setId("idSensorCreateInput");
        idSensorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.idSensor}", Sensor.class));
        idSensorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{caracteristicaBean.completeIdSensor}", List.class, new Class[] { String.class }));
        idSensorCreateInput.setDropdown(true);
        idSensorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idSensor", String.class));
        idSensorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idSensor.descripcio}", String.class));
        idSensorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idSensor}", Sensor.class));
        idSensorCreateInput.setConverter(new SensorConverter());
        idSensorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idSensorCreateInput);
        
        Message idSensorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idSensorCreateInputMessage.setId("idSensorCreateInputMessage");
        idSensorCreateInputMessage.setFor("idSensorCreateInput");
        idSensorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idSensorCreateInputMessage);
        
        HtmlOutputText descripcioCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioCreateOutput.setId("descripcioCreateOutput");
        descripcioCreateOutput.setValue("Descripcio: * ");
        htmlPanelGrid.getChildren().add(descripcioCreateOutput);
        
        InputTextarea descripcioCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioCreateInput.setId("descripcioCreateInput");
        descripcioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.descripcio}", String.class));
        LengthValidator descripcioCreateInputValidator = new LengthValidator();
        descripcioCreateInputValidator.setMaximum(250);
        descripcioCreateInput.addValidator(descripcioCreateInputValidator);
        descripcioCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcioCreateInput);
        
        Message descripcioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcioCreateInputMessage.setId("descripcioCreateInputMessage");
        descripcioCreateInputMessage.setFor("descripcioCreateInput");
        descripcioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcioCreateInputMessage);
        
        HtmlOutputText valorCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        valorCreateOutput.setId("valorCreateOutput");
        valorCreateOutput.setValue("Valor:   ");
        htmlPanelGrid.getChildren().add(valorCreateOutput);
        
        InputText valorCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        valorCreateInput.setId("valorCreateInput");
        valorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.valor}", Double.class));
        valorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(valorCreateInput);
        
        Message valorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        valorCreateInputMessage.setId("valorCreateInputMessage");
        valorCreateInputMessage.setFor("valorCreateInput");
        valorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(valorCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CaracteristicaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idMagnitudEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idMagnitudEditOutput.setId("idMagnitudEditOutput");
        idMagnitudEditOutput.setValue("Id Magnitud:   ");
        htmlPanelGrid.getChildren().add(idMagnitudEditOutput);
        
        AutoComplete idMagnitudEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idMagnitudEditInput.setId("idMagnitudEditInput");
        idMagnitudEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.idMagnitud}", Magnitud.class));
        idMagnitudEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{caracteristicaBean.completeIdMagnitud}", List.class, new Class[] { String.class }));
        idMagnitudEditInput.setDropdown(true);
        idMagnitudEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idMagnitud", String.class));
        idMagnitudEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idMagnitud.nom} #{idMagnitud.simbol}", String.class));
        idMagnitudEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idMagnitud}", Magnitud.class));
        idMagnitudEditInput.setConverter(new MagnitudConverter());
        idMagnitudEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idMagnitudEditInput);
        
        Message idMagnitudEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idMagnitudEditInputMessage.setId("idMagnitudEditInputMessage");
        idMagnitudEditInputMessage.setFor("idMagnitudEditInput");
        idMagnitudEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idMagnitudEditInputMessage);
        
        HtmlOutputText idSensorEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorEditOutput.setId("idSensorEditOutput");
        idSensorEditOutput.setValue("Id Sensor:   ");
        htmlPanelGrid.getChildren().add(idSensorEditOutput);
        
        AutoComplete idSensorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idSensorEditInput.setId("idSensorEditInput");
        idSensorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.idSensor}", Sensor.class));
        idSensorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{caracteristicaBean.completeIdSensor}", List.class, new Class[] { String.class }));
        idSensorEditInput.setDropdown(true);
        idSensorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idSensor", String.class));
        idSensorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idSensor.descripcio}", String.class));
        idSensorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idSensor}", Sensor.class));
        idSensorEditInput.setConverter(new SensorConverter());
        idSensorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idSensorEditInput);
        
        Message idSensorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idSensorEditInputMessage.setId("idSensorEditInputMessage");
        idSensorEditInputMessage.setFor("idSensorEditInput");
        idSensorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idSensorEditInputMessage);
        
        HtmlOutputText descripcioEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioEditOutput.setId("descripcioEditOutput");
        descripcioEditOutput.setValue("Descripcio: * ");
        htmlPanelGrid.getChildren().add(descripcioEditOutput);
        
        InputTextarea descripcioEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioEditInput.setId("descripcioEditInput");
        descripcioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.descripcio}", String.class));
        LengthValidator descripcioEditInputValidator = new LengthValidator();
        descripcioEditInputValidator.setMaximum(250);
        descripcioEditInput.addValidator(descripcioEditInputValidator);
        descripcioEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcioEditInput);
        
        Message descripcioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcioEditInputMessage.setId("descripcioEditInputMessage");
        descripcioEditInputMessage.setFor("descripcioEditInput");
        descripcioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcioEditInputMessage);
        
        HtmlOutputText valorEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        valorEditOutput.setId("valorEditOutput");
        valorEditOutput.setValue("Valor:   ");
        htmlPanelGrid.getChildren().add(valorEditOutput);
        
        InputText valorEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        valorEditInput.setId("valorEditInput");
        valorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.valor}", Double.class));
        valorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(valorEditInput);
        
        Message valorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        valorEditInputMessage.setId("valorEditInputMessage");
        valorEditInputMessage.setFor("valorEditInput");
        valorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(valorEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CaracteristicaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idMagnitudLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idMagnitudLabel.setId("idMagnitudLabel");
        idMagnitudLabel.setValue("Id Magnitud:   ");
        htmlPanelGrid.getChildren().add(idMagnitudLabel);
        
        HtmlOutputText idMagnitudValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idMagnitudValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.idMagnitud}", Magnitud.class));
        idMagnitudValue.setConverter(new MagnitudConverter());
        htmlPanelGrid.getChildren().add(idMagnitudValue);
        
        HtmlOutputText idSensorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorLabel.setId("idSensorLabel");
        idSensorLabel.setValue("Id Sensor:   ");
        htmlPanelGrid.getChildren().add(idSensorLabel);
        
        HtmlOutputText idSensorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idSensorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.idSensor}", Sensor.class));
        idSensorValue.setConverter(new SensorConverter());
        htmlPanelGrid.getChildren().add(idSensorValue);
        
        HtmlOutputText descripcioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcioLabel.setId("descripcioLabel");
        descripcioLabel.setValue("Descripcio:   ");
        htmlPanelGrid.getChildren().add(descripcioLabel);
        
        InputTextarea descripcioValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcioValue.setId("descripcioValue");
        descripcioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.descripcio}", String.class));
        descripcioValue.setReadonly(true);
        descripcioValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descripcioValue);
        
        HtmlOutputText valorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        valorLabel.setId("valorLabel");
        valorLabel.setValue("Valor:   ");
        htmlPanelGrid.getChildren().add(valorLabel);
        
        HtmlOutputText valorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        valorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caracteristicaBean.caracteristica.valor}", String.class));
        htmlPanelGrid.getChildren().add(valorValue);
        
        return htmlPanelGrid;
    }
    
    public Caracteristica CaracteristicaBean.getCaracteristica() {
        if (caracteristica == null) {
            caracteristica = new Caracteristica();
        }
        return caracteristica;
    }
    
    public void CaracteristicaBean.setCaracteristica(Caracteristica caracteristica) {
        this.caracteristica = caracteristica;
    }
    
    public List<Magnitud> CaracteristicaBean.completeIdMagnitud(String query) {
        List<Magnitud> suggestions = new ArrayList<Magnitud>();
        for (Magnitud magnitud : Magnitud.findAllMagnituds()) {
            String magnitudStr = String.valueOf(magnitud.getNom() +  " "  + magnitud.getSimbol());
            if (magnitudStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(magnitud);
            }
        }
        return suggestions;
    }
    
    public List<Sensor> CaracteristicaBean.completeIdSensor(String query) {
        List<Sensor> suggestions = new ArrayList<Sensor>();
        for (Sensor sensor : Sensor.findAllSensors()) {
            String sensorStr = String.valueOf(sensor.getDescripcio());
            if (sensorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(sensor);
            }
        }
        return suggestions;
    }
    
    public String CaracteristicaBean.onEdit() {
        return null;
    }
    
    public boolean CaracteristicaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CaracteristicaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CaracteristicaBean.displayList() {
        createDialogVisible = false;
        findAllCaracteristicas();
        return "caracteristica";
    }
    
    public String CaracteristicaBean.displayCreateDialog() {
        caracteristica = new Caracteristica();
        createDialogVisible = true;
        return "caracteristica";
    }
    
    public String CaracteristicaBean.persist() {
        String message = "";
        if (caracteristica.getId() != null) {
            caracteristica.merge();
            message = "Successfully updated";
        } else {
            caracteristica.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCaracteristicas();
    }
    
    public String CaracteristicaBean.delete() {
        caracteristica.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCaracteristicas();
    }
    
    public void CaracteristicaBean.reset() {
        caracteristica = null;
        createDialogVisible = false;
    }
    
    public void CaracteristicaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
